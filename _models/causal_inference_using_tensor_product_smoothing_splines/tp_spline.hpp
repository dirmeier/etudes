
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace tp_spline_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 118> locations_array__ = 
{" (found before start of program)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 25, column 2 to column 30)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 26, column 2 to column 23)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 27, column 2 to column 22)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 41, column 2 to column 18)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 42, column 2 to column 17)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 31, column 2 to column 27)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 32, column 2 to column 23)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 34, column 6 to column 40)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 33, column 34 to line 35, column 3)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 33, column 2 to line 35, column 3)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 37, column 2 to column 28)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 4, column 2 to column 17)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 5, column 14 to column 15)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 5, column 2 to column 17)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 6, column 9 to column 10)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 6, column 2 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 8, column 2 to column 22)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 9, column 2 to column 23)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 10, column 9 to column 16)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 10, column 2 to column 27)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 11, column 9 to column 16)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 11, column 2 to column 27)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 15, column 2 to column 36)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 17, column 9 to column 16)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 17, column 2 to column 27)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 18, column 2 to column 22)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 19, column 2 to column 22)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 21, column 9 to column 10)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 21, column 12 to column 27)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 21, column 2 to column 73)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 25, column 9 to column 25)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 41, column 9 to column 10)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 3, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 3, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 4, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 5, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 7, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 2, column 54, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 11, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 21, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 15, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 14, column 20, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 14, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 17, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 19, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 10, column 56, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 24, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 25, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 26, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 29, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 28, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 28, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 33, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 34, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 32, column 34, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 32, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 38, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 39, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 37, column 42, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 37, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 42, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 23, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 47, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 51, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 50, column 39, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 50, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 56, column 8, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 55, column 26, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 55, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 54, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 54, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 60, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 46, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 64, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 65, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 66, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 68, column 15, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 68, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 70, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 71, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 69, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 69, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 74, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 63, column 51, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 82, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 81, column 9, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 79, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 78, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 78, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 77, column 61, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 88, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 89, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 90, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 91, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 94, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 93, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 93, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 25, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 101, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 100, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 100, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 105, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 104, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 104, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 108, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 87, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/tp_spline.stan', line 1, column 0)"};


template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
concat_rr(const int& N, const std::vector<T1__>& arr1,
          const std::vector<T2__>& arr2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 33;
    validate_non_negative_index("v", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> v;
    v = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 35;
    assign(v, arr1, "assigning variable v", index_omni(), index_uni(1));
    current_statement__ = 36;
    assign(v, arr2, "assigning variable v", index_omni(), index_uni(2));
    current_statement__ = 37;
    return v;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concat_rr_functor__ {
template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
operator()(const int& N, const std::vector<T1__>& arr1,
           const std::vector<T2__>& arr2, std::ostream* pstream__)  const 
{
return concat_rr(N, arr1, arr2, pstream__);
}
};

template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
concat_vr(const int& N, const std::vector<Eigen::Matrix<T1__, -1, 1>>& arr1,
          const std::vector<T2__>& arr2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int P1;
    P1 = std::numeric_limits<int>::min();
    
    current_statement__ = 39;
    P1 = size(rvalue(arr1, "arr1", index_uni(1)));
    current_statement__ = 40;
    validate_non_negative_index("v", "N", N);
    current_statement__ = 41;
    validate_non_negative_index("v", "P1 + 1", (P1 + 1));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> v;
    v = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(
      (P1 + 1)));
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 45;
    for (int i = 1; i <= P1; ++i) {
      current_statement__ = 43;
      assign(v, rvalue(arr1, "arr1", index_omni(), index_uni(i)),
        "assigning variable v", index_omni(), index_uni(i));
    }
    current_statement__ = 46;
    assign(v, arr2, "assigning variable v", index_omni(), index_uni((P1 + 1)));
    current_statement__ = 47;
    return v;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concat_vr_functor__ {
template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
operator()(const int& N, const std::vector<Eigen::Matrix<T1__, -1, 1>>& arr1,
           const std::vector<T2__>& arr2, std::ostream* pstream__)  const 
{
return concat_vr(N, arr1, arr2, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
bspline_basis(const T0__& x, const T1__& knots_arg__, const int& i,
              const int& d, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& knots = to_ref(knots_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_knots;
    n_knots = std::numeric_limits<int>::min();
    
    current_statement__ = 49;
    n_knots = size(knots);
    local_scalar_t__ b1;
    b1 = DUMMY_VAR__;
    
    current_statement__ = 50;
    b1 = 0;
    local_scalar_t__ b2;
    b2 = DUMMY_VAR__;
    
    current_statement__ = 51;
    b2 = 0;
    current_statement__ = 54;
    if (logical_eq(d, 0)) {
      current_statement__ = 52;
      return ((primitive_value(
                logical_lte(rvalue(knots, "knots", index_uni(i)), x)) &&
                primitive_value(
                logical_lt(x, rvalue(knots, "knots", index_uni((i + 1)))))) ?
                1.0 : 0.0);
    } 
    current_statement__ = 58;
    if (logical_neq(rvalue(knots, "knots", index_uni((i + d))),
          rvalue(knots, "knots", index_uni(i)))) {
      current_statement__ = 55;
      b1 = ((x - rvalue(knots, "knots", index_uni(i))) /
             (rvalue(knots, "knots", index_uni((i + d))) -
               rvalue(knots, "knots", index_uni(i))));
      current_statement__ = 56;
      b1 = (b1 * bspline_basis(x, knots, i, (d - 1), pstream__));
    } 
    current_statement__ = 62;
    if (logical_neq(rvalue(knots, "knots", index_uni(((i + d) + 1))),
          rvalue(knots, "knots", index_uni((i + 1))))) {
      current_statement__ = 59;
      b2 = ((rvalue(knots, "knots", index_uni(((i + d) + 1))) - x) /
             (rvalue(knots, "knots", index_uni(((i + d) + 1))) -
               rvalue(knots, "knots", index_uni((i + 1)))));
      current_statement__ = 60;
      b2 = (b2 * bspline_basis(x, knots, (i + 1), (d - 1), pstream__));
    } 
    current_statement__ = 63;
    return (b1 + b2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct bspline_basis_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& knots, const int& i, const int& d,
           std::ostream* pstream__)  const 
{
return bspline_basis(x, knots, i, d, pstream__);
}
};

template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T3__>>, -1, -1>
bspline(const T0__& u_arg__, const int& n_coef, const int& d,
        const T3__& knots_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& u = to_ref(u_arg__);
  const auto& knots = to_ref(knots_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 65;
    n = size(u);
    current_statement__ = 66;
    validate_non_negative_index("mu", "n", n);
    current_statement__ = 67;
    validate_non_negative_index("mu", "n_coef", n_coef);
    Eigen::Matrix<local_scalar_t__, -1, -1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n_coef);
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 71;
    if (logical_neq(((n_coef + d) + 1), size(knots))) {
      current_statement__ = 69;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "n_coef + d != size(knots)";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 76;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 74;
      for (int j = 1; j <= n_coef; ++j) {
        current_statement__ = 72;
        assign(mu,
          bspline_basis(rvalue(u, "u", index_uni(i)), knots, j, d, pstream__),
          "assigning variable mu", index_uni(i), index_uni(j));
      }
    }
    current_statement__ = 77;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct bspline_functor__ {
template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const T0__& u, const int& n_coef, const int& d, const T3__& knots,
           std::ostream* pstream__)  const 
{
return bspline(u, n_coef, d, knots, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
kronecker(const T0__& a_arg__, const T1__& b_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  const auto& b = to_ref(b_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 79;
    n = size(a);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 80;
    m = size(b);
    int idx;
    idx = std::numeric_limits<int>::min();
    
    current_statement__ = 82;
    validate_non_negative_index("r", "n * m", (n * m));
    Eigen::Matrix<local_scalar_t__, 1, -1> r;
    r = Eigen::Matrix<local_scalar_t__, 1, -1>((n * m));
    stan::math::fill(r, DUMMY_VAR__);
    
    current_statement__ = 87;
    for (int i = 1; i <= m; ++i) {
      current_statement__ = 84;
      idx = (((i - 1) * n) + 1);
      current_statement__ = 85;
      assign(r, multiply(a, rvalue(b, "b", index_uni(i))),
        "assigning variable r", index_min_max(idx, ((idx + n) - 1)));
    }
    current_statement__ = 88;
    return r;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct kronecker_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
operator()(const T0__& a, const T1__& b, std::ostream* pstream__)  const 
{
return kronecker(a, b, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, 1, -1>
kronecker_recursive(const std::vector<Eigen::Matrix<T0__, -1, -1>>& B,
                    const int& P, const int& idx, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 94;
    if (logical_eq(P, 2)) {
      current_statement__ = 92;
      return kronecker(rvalue(B, "B", index_uni(1), index_uni(idx)),
               rvalue(B, "B", index_uni(2), index_uni(idx)), pstream__);
    } else {
      current_statement__ = 90;
      return kronecker(
               kronecker(rvalue(B, "B", index_uni(1), index_uni(idx)),
                 rvalue(B, "B", index_uni(2), index_uni(idx)), pstream__),
               rvalue(B, "B", index_uni(3), index_uni(idx)), pstream__);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct kronecker_recursive_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, 1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& B, const int& P,
           const int& idx, std::ostream* pstream__)  const 
{
return kronecker_recursive(B, P, idx, pstream__);
}
};

template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__,
T3__>, -1, -1>
tensor_spline(const std::vector<Eigen::Matrix<T0__, -1, 1>>& u,
              const int& n_coefs, const int& d,
              const std::vector<Eigen::Matrix<T3__, -1, 1>>& knots,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> NP;
    NP = std::vector<int>(2, std::numeric_limits<int>::min());
    
    current_statement__ = 96;
    assign(NP, dims(u), "assigning variable NP");
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 97;
    N = rvalue(NP, "NP", index_uni(1));
    int P;
    P = std::numeric_limits<int>::min();
    
    current_statement__ = 98;
    P = rvalue(NP, "NP", index_uni(2));
    int new_dim;
    new_dim = std::numeric_limits<int>::min();
    
    current_statement__ = 99;
    new_dim = 1;
    current_statement__ = 102;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 100;
      new_dim = (new_dim * n_coefs);
    }
    current_statement__ = 103;
    validate_non_negative_index("mu", "N", N);
    current_statement__ = 104;
    validate_non_negative_index("mu", "new_dim", new_dim);
    Eigen::Matrix<local_scalar_t__, -1, -1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, new_dim);
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 106;
    validate_non_negative_index("B", "P", P);
    current_statement__ = 107;
    validate_non_negative_index("B", "N", N);
    current_statement__ = 108;
    validate_non_negative_index("B", "n_coefs", n_coefs);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> B;
    B = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(P, Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_coefs));
    stan::math::fill(B, DUMMY_VAR__);
    
    current_statement__ = 112;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 110;
      assign(B,
        bspline(to_vector(rvalue(u, "u", index_omni(), index_uni(i))),
          n_coefs, d, rvalue(knots, "knots", index_uni(i)), pstream__),
        "assigning variable B", index_uni(i));
    }
    current_statement__ = 115;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 113;
      assign(mu, kronecker_recursive(B, P, i, pstream__),
        "assigning variable mu", index_uni(i), index_omni());
    }
    current_statement__ = 116;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct tensor_spline_functor__ {
template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__,
T3__>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& u,
           const int& n_coefs, const int& d,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& knots,
           std::ostream* pstream__)  const 
{
return tensor_spline(u, n_coefs, d, knots, pstream__);
}
};

class tp_spline_model final : public model_base_crtp<tp_spline_model> {

 private:
  int N;
  std::vector<Eigen::Matrix<double, -1, 1>> X;
  Eigen::Matrix<double, -1, 1> y__;
  int degree;
  int n_knots;
  Eigen::Matrix<double, -1, 1> x1_knots__;
  Eigen::Matrix<double, -1, 1> x2_knots__;
  int n_coef;
  std::vector<Eigen::Matrix<double, -1, 1>> knots;
  Eigen::Matrix<double, -1, -1> B__;
  int mu_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x1_knots{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x2_knots{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> B{nullptr, 0, 0};
 
 public:
  ~tp_spline_model() { }
  
  inline std::string model_name() const final { return "tp_spline_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = --include_paths=/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines"};
  }
  
  
  tp_spline_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "tp_spline_model_namespace::tp_spline_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 12;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 13;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 14;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      X = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(2));
      
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 14;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 14;
            assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 14;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 15;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 16;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      context__.validate_dims("data initialization","degree","int",
           std::vector<size_t>{});
      degree = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      degree = context__.vals_i("degree")[(1 - 1)];
      current_statement__ = 17;
      check_greater_or_equal(function__, "degree", degree, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization","n_knots","int",
           std::vector<size_t>{});
      n_knots = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      n_knots = context__.vals_i("n_knots")[(1 - 1)];
      current_statement__ = 18;
      check_greater_or_equal(function__, "n_knots", n_knots, 0);
      current_statement__ = 19;
      validate_non_negative_index("x1_knots", "n_knots", n_knots);
      current_statement__ = 20;
      context__.validate_dims("data initialization","x1_knots","double",
           std::vector<size_t>{static_cast<size_t>(n_knots)});
      x1_knots__ = Eigen::Matrix<double, -1, 1>(n_knots);
      new (&x1_knots) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x1_knots__.data(), n_knots);
      
      
      {
        std::vector<local_scalar_t__> x1_knots_flat__;
        current_statement__ = 20;
        x1_knots_flat__ = context__.vals_r("x1_knots");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 20;
          assign(x1_knots, x1_knots_flat__[(pos__ - 1)],
            "assigning variable x1_knots", index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      validate_non_negative_index("x2_knots", "n_knots", n_knots);
      current_statement__ = 22;
      context__.validate_dims("data initialization","x2_knots","double",
           std::vector<size_t>{static_cast<size_t>(n_knots)});
      x2_knots__ = Eigen::Matrix<double, -1, 1>(n_knots);
      new (&x2_knots) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x2_knots__.data(), n_knots);
      
      
      {
        std::vector<local_scalar_t__> x2_knots_flat__;
        current_statement__ = 22;
        x2_knots_flat__ = context__.vals_r("x2_knots");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 22;
          assign(x2_knots, x2_knots_flat__[(pos__ - 1)],
            "assigning variable x2_knots", index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      n_coef = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      n_coef = ((n_knots - degree) - 1);
      current_statement__ = 24;
      validate_non_negative_index("knots", "n_knots", n_knots);
      current_statement__ = 25;
      knots = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(n_knots));
      stan::math::fill(knots, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(knots, x1_knots, "assigning variable knots", index_uni(1));
      current_statement__ = 27;
      assign(knots, x2_knots, "assigning variable knots", index_uni(2));
      current_statement__ = 28;
      validate_non_negative_index("B", "N", N);
      current_statement__ = 29;
      validate_non_negative_index("B", "n_coef * n_coef", (n_coef * n_coef));
      current_statement__ = 30;
      B__ = Eigen::Matrix<double, -1, -1>(N, (n_coef * n_coef));
      new (&B) Eigen::Map<Eigen::Matrix<double, -1, -1>>(B__.data(), N, 
        (n_coef * n_coef));
      stan::math::fill(B, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 30;
      assign(B, tensor_spline(X, n_coef, degree, knots, pstream__),
        "assigning variable B");
      current_statement__ = 31;
      mu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      mu_1dim__ = (n_coef * n_coef);
      current_statement__ = 31;
      validate_non_negative_index("mu", "n_coef * n_coef", mu_1dim__);
      current_statement__ = 32;
      validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = mu_1dim__ + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "tp_spline_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(mu_1dim__);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
             mu_1dim__);
      local_scalar_t__ mu_tau;
      mu_tau = DUMMY_VAR__;
      
      current_statement__ = 2;
      mu_tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(inv_gamma_lpdf<propto__>(mu_tau, 4, 4));
        current_statement__ = 7;
        lp_accum__.add(
          std_normal_lpdf<propto__>(rvalue(mu, "mu", index_uni(1))));
        current_statement__ = 10;
        for (int i = 2; i <= (n_coef * n_coef); ++i) {
          current_statement__ = 8;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(mu, "mu", index_uni(i)),
              rvalue(mu, "mu", index_uni((i - 1))), mu_tau));
        }
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(y, multiply(B, mu), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "tp_spline_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(mu_1dim__);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
             mu_1dim__);
      double mu_tau;
      mu_tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      mu_tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      out__.write(mu);
      out__.write(mu_tau);
      out__.write(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_hat;
      y_hat = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y_hat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(y_hat, multiply(B, mu), "assigning variable y_hat");
      out__.write(y_hat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(mu_1dim__);
      stan::math::fill(mu, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        assign(mu, in__.read<local_scalar_t__>(),
          "assigning variable mu", index_uni(sym1__));
      }
      out__.write(mu);
      local_scalar_t__ mu_tau;
      mu_tau = DUMMY_VAR__;
      
      mu_tau = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu_tau);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "mu_tau", "sigma", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(mu_1dim__)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tau");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_tau");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((mu_1dim__ + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((mu_1dim__ + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"mu", "mu_tau", "sigma"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{mu_1dim__, 
       1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = tp_spline_model_namespace::tp_spline_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return tp_spline_model_namespace::profiles__;
}

#endif


