
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace gpx43linear_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 146> locations_array__ = 
{" (found before start of program)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 21, column 4 to column 33)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 22, column 4 to column 33)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 24, column 4 to column 32)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 25, column 4 to column 33)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 27, column 4 to column 39)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 28, column 4 to column 37)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 29, column 4 to column 33)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 31, column 4 to column 39)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 32, column 4 to column 37)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 33, column 4 to column 33)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 38, column 4 to column 38)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 42, column 17 to column 20)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 42, column 4 to column 49)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 43, column 18 to column 21)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 43, column 4 to column 49)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 44, column 19 to column 22)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 44, column 4 to column 51)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 46, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 46, column 16 to column 19)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 46, column 4 to line 48, column 56)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 49, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 49, column 16 to column 19)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 49, column 4 to column 49)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 51, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 51, column 16 to column 19)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 51, column 4 to line 53, column 56)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 54, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 54, column 16 to column 19)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 54, column 4 to column 49)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 57, column 4 to column 60)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 58, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 60, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 61, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 63, column 4 to column 60)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 64, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 65, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 67, column 4 to column 60)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 68, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 69, column 4 to column 50)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 71, column 4 to column 46)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 72, column 4 to column 56)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 73, column 4 to column 56)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 4, column 4 to column 21)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 5, column 4 to column 21)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 6, column 35 to column 38)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 6, column 4 to column 40)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 7, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 7, column 4 to column 18)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 8, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 8, column 4 to column 19)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 9, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 9, column 4 to column 18)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 10, column 4 to column 15)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 11, column 4 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 15, column 12 to column 15)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 15, column 4 to column 34)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 16, column 13 to column 16)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 16, column 4 to column 36)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 22, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 38, column 11 to column 14)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 3, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 3, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 4, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 5, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 7, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 2, column 54, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 11, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 21, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 12, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 15, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 14, column 20, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 14, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 17, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 19, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 10, column 56, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 24, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 25, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 26, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 29, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 28, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 28, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 33, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 34, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 32, column 34, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 32, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 38, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 39, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 37, column 42, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 37, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 42, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 23, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 47, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 48, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 51, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 50, column 39, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 50, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 56, column 8, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 55, column 26, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 55, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 54, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 54, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 60, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 46, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 64, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 65, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 66, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 68, column 15, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 68, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 70, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 71, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 69, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 69, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 74, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 63, column 51, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 82, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 81, column 9, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 79, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 78, column 16, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 78, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 77, column 61, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 88, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 89, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 90, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 91, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 94, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 93, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 93, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 97, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 25, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 11, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 14, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 98, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 101, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 100, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 100, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 105, column 6, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 104, column 19, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 104, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 108, column 4, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)",
 " (in '/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/functions.stan', line 87, column 2, included from\n'/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines/gp+linear_model.stan', line 1, column 0)"};


template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
concat_rr(const int& N, const std::vector<T1__>& arr1,
          const std::vector<T2__>& arr2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 61;
    validate_non_negative_index("v", "N", N);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> v;
    v = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 63;
    assign(v, arr1, "assigning variable v", index_omni(), index_uni(1));
    current_statement__ = 64;
    assign(v, arr2, "assigning variable v", index_omni(), index_uni(2));
    current_statement__ = 65;
    return v;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concat_rr_functor__ {
template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
operator()(const int& N, const std::vector<T1__>& arr1,
           const std::vector<T2__>& arr2, std::ostream* pstream__)  const 
{
return concat_rr(N, arr1, arr2, pstream__);
}
};

template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
concat_vr(const int& N, const std::vector<Eigen::Matrix<T1__, -1, 1>>& arr1,
          const std::vector<T2__>& arr2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int P1;
    P1 = std::numeric_limits<int>::min();
    
    current_statement__ = 67;
    P1 = size(rvalue(arr1, "arr1", index_uni(1)));
    current_statement__ = 68;
    validate_non_negative_index("v", "N", N);
    current_statement__ = 69;
    validate_non_negative_index("v", "P1 + 1", (P1 + 1));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> v;
    v = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(
      (P1 + 1)));
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 73;
    for (int i = 1; i <= P1; ++i) {
      current_statement__ = 71;
      assign(v, rvalue(arr1, "arr1", index_omni(), index_uni(i)),
        "assigning variable v", index_omni(), index_uni(i));
    }
    current_statement__ = 74;
    assign(v, arr2, "assigning variable v", index_omni(), index_uni((P1 + 1)));
    current_statement__ = 75;
    return v;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct concat_vr_functor__ {
template <typename T1__, typename T2__>
std::vector<Eigen::Matrix<stan::promote_args_t<T1__,
T2__>, -1, 1>>
operator()(const int& N, const std::vector<Eigen::Matrix<T1__, -1, 1>>& arr1,
           const std::vector<T2__>& arr2, std::ostream* pstream__)  const 
{
return concat_vr(N, arr1, arr2, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
bspline_basis(const T0__& x, const T1__& knots_arg__, const int& i,
              const int& d, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& knots = to_ref(knots_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_knots;
    n_knots = std::numeric_limits<int>::min();
    
    current_statement__ = 77;
    n_knots = size(knots);
    local_scalar_t__ b1;
    b1 = DUMMY_VAR__;
    
    current_statement__ = 78;
    b1 = 0;
    local_scalar_t__ b2;
    b2 = DUMMY_VAR__;
    
    current_statement__ = 79;
    b2 = 0;
    current_statement__ = 82;
    if (logical_eq(d, 0)) {
      current_statement__ = 80;
      return ((primitive_value(
                logical_lte(rvalue(knots, "knots", index_uni(i)), x)) &&
                primitive_value(
                logical_lt(x, rvalue(knots, "knots", index_uni((i + 1)))))) ?
                1.0 : 0.0);
    } 
    current_statement__ = 86;
    if (logical_neq(rvalue(knots, "knots", index_uni((i + d))),
          rvalue(knots, "knots", index_uni(i)))) {
      current_statement__ = 83;
      b1 = ((x - rvalue(knots, "knots", index_uni(i))) /
             (rvalue(knots, "knots", index_uni((i + d))) -
               rvalue(knots, "knots", index_uni(i))));
      current_statement__ = 84;
      b1 = (b1 * bspline_basis(x, knots, i, (d - 1), pstream__));
    } 
    current_statement__ = 90;
    if (logical_neq(rvalue(knots, "knots", index_uni(((i + d) + 1))),
          rvalue(knots, "knots", index_uni((i + 1))))) {
      current_statement__ = 87;
      b2 = ((rvalue(knots, "knots", index_uni(((i + d) + 1))) - x) /
             (rvalue(knots, "knots", index_uni(((i + d) + 1))) -
               rvalue(knots, "knots", index_uni((i + 1)))));
      current_statement__ = 88;
      b2 = (b2 * bspline_basis(x, knots, (i + 1), (d - 1), pstream__));
    } 
    current_statement__ = 91;
    return (b1 + b2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct bspline_basis_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& knots, const int& i, const int& d,
           std::ostream* pstream__)  const 
{
return bspline_basis(x, knots, i, d, pstream__);
}
};

template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T3__>>, -1, -1>
bspline(const T0__& u_arg__, const int& n_coef, const int& d,
        const T3__& knots_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& u = to_ref(u_arg__);
  const auto& knots = to_ref(knots_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 93;
    n = size(u);
    current_statement__ = 94;
    validate_non_negative_index("mu", "n", n);
    current_statement__ = 95;
    validate_non_negative_index("mu", "n_coef", n_coef);
    Eigen::Matrix<local_scalar_t__, -1, -1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n_coef);
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 99;
    if (logical_neq(((n_coef + d) + 1), size(knots))) {
      current_statement__ = 97;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "n_coef + d != size(knots)";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 104;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 102;
      for (int j = 1; j <= n_coef; ++j) {
        current_statement__ = 100;
        assign(mu,
          bspline_basis(rvalue(u, "u", index_uni(i)), knots, j, d, pstream__),
          "assigning variable mu", index_uni(i), index_uni(j));
      }
    }
    current_statement__ = 105;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct bspline_functor__ {
template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const T0__& u, const int& n_coef, const int& d, const T3__& knots,
           std::ostream* pstream__)  const 
{
return bspline(u, n_coef, d, knots, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
kronecker(const T0__& a_arg__, const T1__& b_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& a = to_ref(a_arg__);
  const auto& b = to_ref(b_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 107;
    n = size(a);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 108;
    m = size(b);
    int idx;
    idx = std::numeric_limits<int>::min();
    
    current_statement__ = 110;
    validate_non_negative_index("r", "n * m", (n * m));
    Eigen::Matrix<local_scalar_t__, 1, -1> r;
    r = Eigen::Matrix<local_scalar_t__, 1, -1>((n * m));
    stan::math::fill(r, DUMMY_VAR__);
    
    current_statement__ = 115;
    for (int i = 1; i <= m; ++i) {
      current_statement__ = 112;
      idx = (((i - 1) * n) + 1);
      current_statement__ = 113;
      assign(r, multiply(a, rvalue(b, "b", index_uni(i))),
        "assigning variable r", index_min_max(idx, ((idx + n) - 1)));
    }
    current_statement__ = 116;
    return r;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct kronecker_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, 1, -1>
operator()(const T0__& a, const T1__& b, std::ostream* pstream__)  const 
{
return kronecker(a, b, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, 1, -1>
kronecker_recursive(const std::vector<Eigen::Matrix<T0__, -1, -1>>& B,
                    const int& P, const int& idx, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 122;
    if (logical_eq(P, 2)) {
      current_statement__ = 120;
      return kronecker(rvalue(B, "B", index_uni(1), index_uni(idx)),
               rvalue(B, "B", index_uni(2), index_uni(idx)), pstream__);
    } else {
      current_statement__ = 118;
      return kronecker(
               kronecker(rvalue(B, "B", index_uni(1), index_uni(idx)),
                 rvalue(B, "B", index_uni(2), index_uni(idx)), pstream__),
               rvalue(B, "B", index_uni(3), index_uni(idx)), pstream__);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct kronecker_recursive_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, 1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, -1>>& B, const int& P,
           const int& idx, std::ostream* pstream__)  const 
{
return kronecker_recursive(B, P, idx, pstream__);
}
};

template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__,
T3__>, -1, -1>
tensor_spline(const std::vector<Eigen::Matrix<T0__, -1, 1>>& u,
              const int& n_coefs, const int& d,
              const std::vector<Eigen::Matrix<T3__, -1, 1>>& knots,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<int> NP;
    NP = std::vector<int>(2, std::numeric_limits<int>::min());
    
    current_statement__ = 124;
    assign(NP, dims(u), "assigning variable NP");
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 125;
    N = rvalue(NP, "NP", index_uni(1));
    int P;
    P = std::numeric_limits<int>::min();
    
    current_statement__ = 126;
    P = rvalue(NP, "NP", index_uni(2));
    int new_dim;
    new_dim = std::numeric_limits<int>::min();
    
    current_statement__ = 127;
    new_dim = 1;
    current_statement__ = 130;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 128;
      new_dim = (new_dim * n_coefs);
    }
    current_statement__ = 131;
    validate_non_negative_index("mu", "N", N);
    current_statement__ = 132;
    validate_non_negative_index("mu", "new_dim", new_dim);
    Eigen::Matrix<local_scalar_t__, -1, -1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, new_dim);
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 134;
    validate_non_negative_index("B", "P", P);
    current_statement__ = 135;
    validate_non_negative_index("B", "N", N);
    current_statement__ = 136;
    validate_non_negative_index("B", "n_coefs", n_coefs);
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> B;
    B = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(P, Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_coefs));
    stan::math::fill(B, DUMMY_VAR__);
    
    current_statement__ = 140;
    for (int i = 1; i <= P; ++i) {
      current_statement__ = 138;
      assign(B,
        bspline(to_vector(rvalue(u, "u", index_omni(), index_uni(i))),
          n_coefs, d, rvalue(knots, "knots", index_uni(i)), pstream__),
        "assigning variable B", index_uni(i));
    }
    current_statement__ = 143;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 141;
      assign(mu, kronecker_recursive(B, P, i, pstream__),
        "assigning variable mu", index_uni(i), index_omni());
    }
    current_statement__ = 144;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct tensor_spline_functor__ {
template <typename T0__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__,
T3__>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& u,
           const int& n_coefs, const int& d,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& knots,
           std::ostream* pstream__)  const 
{
return tensor_spline(u, n_coefs, d, knots, pstream__);
}
};

class gpx43linear_model_model final : public model_base_crtp<gpx43linear_model_model> {

 private:
  int N_I;
  int N_O;
  std::vector<int> i_to_o;
  Eigen::Matrix<double, -1, 1> X__;
  Eigen::Matrix<double, -1, 1> tr__;
  Eigen::Matrix<double, -1, 1> y__;
  double alpha;
  double beta;
  std::vector<double> xr;
  std::vector<double> trr; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> X{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> tr{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~gpx43linear_model_model() { }
  
  inline std::string model_name() const final { return "gpx43linear_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = --include_paths=/home/simon/PROJECTS/_etudes/_models/causal_inference_using_tensor_product_smoothing_splines"};
  }
  
  
  gpx43linear_model_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gpx43linear_model_model_namespace::gpx43linear_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 43;
      context__.validate_dims("data initialization","N_I","int",
           std::vector<size_t>{});
      N_I = std::numeric_limits<int>::min();
      
      current_statement__ = 43;
      N_I = context__.vals_i("N_I")[(1 - 1)];
      current_statement__ = 43;
      check_greater_or_equal(function__, "N_I", N_I, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","N_O","int",
           std::vector<size_t>{});
      N_O = std::numeric_limits<int>::min();
      
      current_statement__ = 44;
      N_O = context__.vals_i("N_O")[(1 - 1)];
      current_statement__ = 44;
      check_greater_or_equal(function__, "N_O", N_O, 0);
      current_statement__ = 45;
      validate_non_negative_index("i_to_o", "N_I", N_I);
      current_statement__ = 46;
      context__.validate_dims("data initialization","i_to_o","int",
           std::vector<size_t>{static_cast<size_t>(N_I)});
      i_to_o = std::vector<int>(N_I, std::numeric_limits<int>::min());
      
      current_statement__ = 46;
      i_to_o = context__.vals_i("i_to_o");
      current_statement__ = 46;
      for (int sym1__ = 1; sym1__ <= N_I; ++sym1__) {
        current_statement__ = 46;
        check_greater_or_equal(function__, "i_to_o[sym1__]",
                               i_to_o[(sym1__ - 1)], 0);
      }
      current_statement__ = 46;
      for (int sym1__ = 1; sym1__ <= N_I; ++sym1__) {
        current_statement__ = 46;
        check_less_or_equal(function__, "i_to_o[sym1__]",
                            i_to_o[(sym1__ - 1)], N_O);
      }
      current_statement__ = 47;
      validate_non_negative_index("X", "N_I", N_I);
      current_statement__ = 48;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N_I)});
      X__ = Eigen::Matrix<double, -1, 1>(N_I);
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, 1>>(X__.data(), N_I);
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 48;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N_I; ++sym1__) {
          current_statement__ = 48;
          assign(X, X_flat__[(pos__ - 1)],
            "assigning variable X", index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      validate_non_negative_index("tr", "N_I", N_I);
      current_statement__ = 50;
      context__.validate_dims("data initialization","tr","double",
           std::vector<size_t>{static_cast<size_t>(N_I)});
      tr__ = Eigen::Matrix<double, -1, 1>(N_I);
      new (&tr) Eigen::Map<Eigen::Matrix<double, -1, 1>>(tr__.data(), N_I);
      
      {
        std::vector<local_scalar_t__> tr_flat__;
        current_statement__ = 50;
        tr_flat__ = context__.vals_r("tr");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N_I; ++sym1__) {
          current_statement__ = 50;
          assign(tr, tr_flat__[(pos__ - 1)],
            "assigning variable tr", index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      validate_non_negative_index("y", "N_I", N_I);
      current_statement__ = 52;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N_I)});
      y__ = Eigen::Matrix<double, -1, 1>(N_I);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N_I);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 52;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N_I; ++sym1__) {
          current_statement__ = 52;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{});
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization","beta","double",
           std::vector<size_t>{});
      beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      beta = context__.vals_r("beta")[(1 - 1)];
      current_statement__ = 55;
      validate_non_negative_index("xr", "N_I", N_I);
      current_statement__ = 56;
      xr = std::vector<double>(N_I, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 56;
      assign(xr, to_array_1d(X), "assigning variable xr");
      current_statement__ = 57;
      validate_non_negative_index("trr", "N_I", N_I);
      current_statement__ = 58;
      trr = std::vector<double>(N_I, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 58;
      assign(trr, to_array_1d(tr), "assigning variable trr");
      current_statement__ = 59;
      validate_non_negative_index("U_tilde", "N_O", N_O);
      current_statement__ = 60;
      validate_non_negative_index("U", "N_O", N_O);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N_O + 1 + 1 + 2 + 1 + 1 + 3 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gpx43linear_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ u_scale;
      u_scale = DUMMY_VAR__;
      
      current_statement__ = 1;
      u_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> U_tilde;
      U_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(N_O);
      stan::math::fill(U_tilde, DUMMY_VAR__);
      
      current_statement__ = 2;
      U_tilde = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_O);
      local_scalar_t__ x_beta;
      x_beta = DUMMY_VAR__;
      
      current_statement__ = 3;
      x_beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ x_scale;
      x_scale = DUMMY_VAR__;
      
      current_statement__ = 4;
      x_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      std::vector<local_scalar_t__> cov_t_rhos;
      cov_t_rhos = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 5;
      cov_t_rhos = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, 2);
      local_scalar_t__ cov_t_scale;
      cov_t_scale = DUMMY_VAR__;
      
      current_statement__ = 6;
      cov_t_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ t_scale;
      t_scale = DUMMY_VAR__;
      
      current_statement__ = 7;
      t_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      std::vector<local_scalar_t__> cov_y_rhos;
      cov_y_rhos = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      
      current_statement__ = 8;
      cov_y_rhos = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, 3);
      local_scalar_t__ cov_y_scale;
      cov_y_scale = DUMMY_VAR__;
      
      current_statement__ = 9;
      cov_y_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ y_scale;
      y_scale = DUMMY_VAR__;
      
      current_statement__ = 10;
      y_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> U;
      U = Eigen::Matrix<local_scalar_t__, -1, 1>(N_O);
      stan::math::fill(U, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(U, multiply(U_tilde, u_scale), "assigning variable U");
      {
        current_statement__ = 12;
        validate_non_negative_index("ur", "N_I", N_I);
        std::vector<local_scalar_t__> ur;
        ur = std::vector<local_scalar_t__>(N_I, DUMMY_VAR__);
        
        current_statement__ = 13;
        assign(ur, to_array_1d(rvalue(U, "U", index_multi(i_to_o))),
          "assigning variable ur");
        current_statement__ = 14;
        validate_non_negative_index("uxr", "N_I", N_I);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> uxr;
        uxr = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_I, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
        stan::math::fill(uxr, DUMMY_VAR__);
        
        current_statement__ = 15;
        assign(uxr, concat_rr(N_I, ur, xr, pstream__),
          "assigning variable uxr");
        current_statement__ = 16;
        validate_non_negative_index("uxtr", "N_I", N_I);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> uxtr;
        uxtr = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_I, Eigen::Matrix<local_scalar_t__, -1, 1>(3));
        stan::math::fill(uxtr, DUMMY_VAR__);
        
        current_statement__ = 17;
        assign(uxtr, concat_vr(N_I, uxr, trr, pstream__),
          "assigning variable uxtr");
        current_statement__ = 18;
        validate_non_negative_index("KT", "N_I", N_I);
        current_statement__ = 19;
        validate_non_negative_index("KT", "N_I", N_I);
        Eigen::Matrix<local_scalar_t__, -1, -1> KT;
        KT = Eigen::Matrix<local_scalar_t__, -1, -1>(N_I, N_I);
        stan::math::fill(KT, DUMMY_VAR__);
        
        current_statement__ = 20;
        assign(KT,
          add(
            add(gp_exp_quad_cov(uxr, uxr, cov_t_scale, cov_t_rhos),
              diag_matrix(rep_vector(1e-10, N_I))),
            diag_matrix(rep_vector(square(t_scale), N_I))),
          "assigning variable KT");
        current_statement__ = 21;
        validate_non_negative_index("LT", "N_I", N_I);
        current_statement__ = 22;
        validate_non_negative_index("LT", "N_I", N_I);
        Eigen::Matrix<local_scalar_t__, -1, -1> LT;
        LT = Eigen::Matrix<local_scalar_t__, -1, -1>(N_I, N_I);
        stan::math::fill(LT, DUMMY_VAR__);
        
        current_statement__ = 23;
        assign(LT, cholesky_decompose(KT), "assigning variable LT");
        current_statement__ = 24;
        validate_non_negative_index("KY", "N_I", N_I);
        current_statement__ = 25;
        validate_non_negative_index("KY", "N_I", N_I);
        Eigen::Matrix<local_scalar_t__, -1, -1> KY;
        KY = Eigen::Matrix<local_scalar_t__, -1, -1>(N_I, N_I);
        stan::math::fill(KY, DUMMY_VAR__);
        
        current_statement__ = 26;
        assign(KY,
          add(
            add(gp_exp_quad_cov(uxtr, uxtr, cov_y_scale, cov_y_rhos),
              diag_matrix(rep_vector(1e-10, N_I))),
            diag_matrix(rep_vector(square(y_scale), N_I))),
          "assigning variable KY");
        current_statement__ = 27;
        validate_non_negative_index("LY", "N_I", N_I);
        current_statement__ = 28;
        validate_non_negative_index("LY", "N_I", N_I);
        Eigen::Matrix<local_scalar_t__, -1, -1> LY;
        LY = Eigen::Matrix<local_scalar_t__, -1, -1>(N_I, N_I);
        stan::math::fill(LY, DUMMY_VAR__);
        
        current_statement__ = 29;
        assign(LY, cholesky_decompose(KY), "assigning variable LY");
        current_statement__ = 30;
        lp_accum__.add(inv_gamma_lpdf<propto__>(u_scale, alpha, beta));
        current_statement__ = 31;
        lp_accum__.add(std_normal_lpdf<propto__>(U_tilde));
        current_statement__ = 32;
        lp_accum__.add(std_normal_lpdf<propto__>(x_beta));
        current_statement__ = 33;
        lp_accum__.add(std_normal_lpdf<propto__>(x_scale));
        current_statement__ = 34;
        lp_accum__.add(inv_gamma_lpdf<propto__>(cov_t_rhos, alpha, beta));
        current_statement__ = 35;
        lp_accum__.add(std_normal_lpdf<propto__>(cov_t_scale));
        current_statement__ = 36;
        lp_accum__.add(std_normal_lpdf<propto__>(t_scale));
        current_statement__ = 37;
        lp_accum__.add(inv_gamma_lpdf<propto__>(cov_y_rhos, alpha, beta));
        current_statement__ = 38;
        lp_accum__.add(std_normal_lpdf<propto__>(cov_y_scale));
        current_statement__ = 39;
        lp_accum__.add(std_normal_lpdf<propto__>(y_scale));
        current_statement__ = 40;
        lp_accum__.add(
          normal_lpdf<propto__>(xr,
            multiply(rvalue(U, "U", index_multi(i_to_o)), x_beta), x_scale));
        current_statement__ = 41;
        lp_accum__.add(
          multi_normal_cholesky_lpdf<propto__>(tr, rep_vector(0, N_I), LT));
        current_statement__ = 42;
        lp_accum__.add(
          multi_normal_cholesky_lpdf<propto__>(y, rep_vector(0, N_I), LY));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gpx43linear_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double u_scale;
      u_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      u_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> U_tilde;
      U_tilde = Eigen::Matrix<double, -1, 1>(N_O);
      stan::math::fill(U_tilde, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      U_tilde = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_O);
      double x_beta;
      x_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      x_beta = in__.template read<local_scalar_t__>();
      double x_scale;
      x_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      x_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      std::vector<double> cov_t_rhos;
      cov_t_rhos = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 5;
      cov_t_rhos = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, 2);
      double cov_t_scale;
      cov_t_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      cov_t_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double t_scale;
      t_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      t_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      std::vector<double> cov_y_rhos;
      cov_y_rhos = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 8;
      cov_y_rhos = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, 3);
      double cov_y_scale;
      cov_y_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      cov_y_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double y_scale;
      y_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      y_scale = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> U;
      U = Eigen::Matrix<double, -1, 1>(N_O);
      stan::math::fill(U, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(u_scale);
      out__.write(U_tilde);
      out__.write(x_beta);
      out__.write(x_scale);
      out__.write(cov_t_rhos);
      out__.write(cov_t_scale);
      out__.write(t_scale);
      out__.write(cov_y_rhos);
      out__.write(cov_y_scale);
      out__.write(y_scale);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      assign(U, multiply(U_tilde, u_scale), "assigning variable U");
      if (emit_transformed_parameters__) {
        out__.write(U);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ u_scale;
      u_scale = DUMMY_VAR__;
      
      u_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, u_scale);
      Eigen::Matrix<local_scalar_t__, -1, 1> U_tilde;
      U_tilde = Eigen::Matrix<local_scalar_t__, -1, 1>(N_O);
      stan::math::fill(U_tilde, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_O; ++sym1__) {
        assign(U_tilde, in__.read<local_scalar_t__>(),
          "assigning variable U_tilde", index_uni(sym1__));
      }
      out__.write(U_tilde);
      local_scalar_t__ x_beta;
      x_beta = DUMMY_VAR__;
      
      x_beta = in__.read<local_scalar_t__>();
      out__.write(x_beta);
      local_scalar_t__ x_scale;
      x_scale = DUMMY_VAR__;
      
      x_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, x_scale);
      std::vector<local_scalar_t__> cov_t_rhos;
      cov_t_rhos = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        cov_t_rhos[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, cov_t_rhos);
      local_scalar_t__ cov_t_scale;
      cov_t_scale = DUMMY_VAR__;
      
      cov_t_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, cov_t_scale);
      local_scalar_t__ t_scale;
      t_scale = DUMMY_VAR__;
      
      t_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, t_scale);
      std::vector<local_scalar_t__> cov_y_rhos;
      cov_y_rhos = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        cov_y_rhos[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, cov_y_rhos);
      local_scalar_t__ cov_y_scale;
      cov_y_scale = DUMMY_VAR__;
      
      cov_y_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, cov_y_scale);
      local_scalar_t__ y_scale;
      y_scale = DUMMY_VAR__;
      
      y_scale = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, y_scale);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"u_scale", "U_tilde", "x_beta",
      "x_scale", "cov_t_rhos", "cov_t_scale", "t_scale", "cov_y_rhos",
      "cov_y_scale", "y_scale", "U"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_O)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(3)}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_O)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "u_scale");
    for (int sym1__ = 1; sym1__ <= N_O; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "x_beta");
    param_names__.emplace_back(std::string() + "x_scale");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cov_t_rhos" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "cov_t_scale");
    param_names__.emplace_back(std::string() + "t_scale");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cov_y_rhos" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "cov_y_scale");
    param_names__.emplace_back(std::string() + "y_scale");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_O; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "u_scale");
    for (int sym1__ = 1; sym1__ <= N_O; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U_tilde" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "x_beta");
    param_names__.emplace_back(std::string() + "x_scale");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cov_t_rhos" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "cov_t_scale");
    param_names__.emplace_back(std::string() + "t_scale");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "cov_y_rhos" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "cov_y_scale");
    param_names__.emplace_back(std::string() + "y_scale");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_O; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"u_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_O) + "},\"block\":\"parameters\"},{\"name\":\"x_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cov_t_rhos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cov_t_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cov_y_rhos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cov_y_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_O) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"u_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_O) + "},\"block\":\"parameters\"},{\"name\":\"x_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cov_t_rhos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cov_t_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"cov_y_rhos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"cov_y_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_scale\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_O) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((1 + N_O) + 1) + 1) + 2) + 1) + 1) + 3) + 1) + 1);
      const size_t num_transformed = N_O;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((1 + N_O) + 1) + 1) + 2) + 1) + 1) + 3) + 1) + 1);
      const size_t num_transformed = N_O;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 10> names__{"u_scale", "U_tilde",
      "x_beta", "x_scale", "cov_t_rhos", "cov_t_scale", "t_scale",
      "cov_y_rhos", "cov_y_scale", "y_scale"};
      const std::array<Eigen::Index, 10> constrain_param_sizes__{1, N_O, 
       1, 1, 2, 1, 1, 3, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = gpx43linear_model_model_namespace::gpx43linear_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gpx43linear_model_model_namespace::profiles__;
}

#endif


